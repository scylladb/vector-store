#!/usr/bin/python3

# Copyright 2025-present ScyllaDB
# SPDX-License-Identifier: LicenseRef-ScyllaDB-Source-Available-1.0

import os
import sys
import tarfile
import argparse
import shlex
import argparse
import subprocess
from pathlib import Path

VERSION='1.9.1'

INSTALL_DIR='/usr/bin'

def run(cmd, shell=False):
    if not shell:
        cmd = shlex.split(cmd)
    try:
        res = subprocess.check_output(cmd, shell=shell)
        return res
    except Exception as e:
        print("Error while running:")
        print(cmd,end =" ")
        print(e.output)
        raise

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Download and install prometheus node_exporter')
    parser.add_argument('--arch', default="amd64", help='Architecture to use (amd64/arm64)')
    parser.add_argument('-F', '--force', action='store_true', default=False, help='Force re-installation when node_exporter is already installed')
    args = parser.parse_args()
    force = args.force
    arch = args.arch
    if os.getuid() > 0:
        print('Requires root permission.')
        sys.exit(1)
    install_dir = Path(INSTALL_DIR)
    node_exporter_p = install_dir / 'node_exporter'
    if node_exporter_p.exists():
        if force:
            print('node_exporter already installed, reinstalling')
            try:
                run('systemctl stop node-exporter.service')
            except Exception as e:
                print("could not create node-exporter.service file", e)
        else:
            print('node_exporter already installed, you can use `--force` to force reinstallation')
            sys.exit(1)

    run('curl -L -o /var/tmp/node_exporter.tar.gz https://github.com/prometheus/node_exporter/releases/download/v{version}/node_exporter-{version}.linux-{arch}.tar.gz'.format(version=VERSION, arch=arch))
    run('tar -xvf /var/tmp/node_exporter.tar.gz  --wildcards --no-anchored -C {install_dir} node_exporter'.format(install_dir=INSTALL_DIR))
    os.remove('/var/tmp/node_exporter.tar.gz')

    if node_exporter_p.exists():
        node_exporter_p.unlink()
    os.rename('{install_dir}/node_exporter-{version}.linux-{arch}/node_exporter'.format(install_dir=INSTALL_DIR, version=VERSION, arch=arch), '/usr/bin/node_exporter')
    run('rm -rf {install_dir}/node_exporter-{version}.linux-{arch}'.format(install_dir=INSTALL_DIR, version=VERSION, arch=arch))
    print('node_exporter successfully installed')
